/****************************************************************************

Copyright (c) 2002 - 2012 Novell, Inc.
All Rights Reserved.

This program is free software; you can redistribute it and/or
modify it under the terms of version 2 of the GNU General Public License as
published by the Free Software Foundation.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.   See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, contact Novell, Inc.

To contact Novell about this file by physical or electronic mail,
you may find current contact information at www.novell.com

****************************************************************************/
/**
 * File:	clients/wol.ycp
 * Package:	Boot Server
 * Author:      Anas Nashif <nashif@suse.de>
 * Summary:	WOL
 *
 * $Id$
 */

{

    textdomain "wol";
    import "Wizard";
    import "Label";
    import "WOL";
    import "Popup";
    import "Package";


    define symbol AddorEdit (string to_edit)
	{
	    UI::OpenDialog(
			   `opt(`decorated),
			   `HBox(
				 `HSpacing(1),
				 `HCenter (
					   `HSquash(
						    `VBox (
							   `HCenter (
								     `HSquash(
									      `VBox(
										    `Left(`VSpacing(0.2)),
										    `VSpacing(0.2),
										    `Left(`TextEntry(`id(`host),(_("Host Name:")))),
										    `Left(`TextEntry(`id(`mac),(_("MAC Address of
the Client: "))))
										    )
									      )
								     ),
							   `HSquash(
								    `HBox(
									  `PushButton(`id(`save),
                                                                              Label::SaveButton()),
									  `PushButton(`id(`cancel),
                                                                              Label::CancelButton())
									  )
								    ),
							   `VSpacing(0.2)
							   )
						    )
					   ),
				 `HSpacing(1)
				 )
			   );
if (to_edit!=nil){
 foreach(map<string, string> row, (list<map<string, string> >)WOL::mac_addresses, {
  if (to_edit == row["mac"]:""){
   UI::ChangeWidget(`host, `Value, row["host"]:"");
   UI::ChangeWidget(`mac, `Value, to_edit);
  }
 });
}

	    any ret = nil;
	    while (true)
	    {
		ret = Wizard::UserInput();
		y2debug("ret=%1", ret);
		if (ret == `save)
		{
		    string mac = (string)UI::QueryWidget(`id(`mac), `Value);
		    string host = (string)UI::QueryWidget(`id(`host), `Value);
		    if(to_edit==nil) WOL::Add(mac, host);
			else{
				WOL::Change(to_edit, mac, host);
			    }
		    break;
		}
		else if (ret == `back)
		{
		    break;
		}
	    }
	    UI::CloseDialog();
	    return (symbol)ret;
	}



    Wizard::CreateDialog();
    Wizard::SetDesktopTitleAndIcon("wol");
    Wizard::HideAbortButton();
    if (!Package::InstallAll (["wol"]))
    {
        Popup::Error(_("Package could not be installed.
Install the missing packages and try again."));
        return `auto;
    }


    WOL::Read();
    list overview = WOL::Overview();

//    term below_table = `PushButton(`id(`wake), _("Wake Up"));
    term contents = 
		 /* Table header */
		`VBox(
			`Table(`id(`table), 
				 `header(_("MAC Address"), _("Host Name")),overview),
		  `VBox(
			`PushButton(`id(`wake), _("Wake Up")),
		    `HBox(
                        `PushButton(`id(`add_button), Label::AddButton()),
                        `PushButton(`id(`edit_button), Label::EditButton()),
                        `PushButton(`id(`delete_button), Label::DeleteButton())
			)
		     ));


    string caption = _("Wake-On-Lan");
    string help_text = _("<h2>Wake on LAN</h2>
<p>With WOL, you can 'wake up' your PC simply by sending a 'magic packet' 
over the network.</p>");

    Wizard::SetContentsButtons(caption, contents, help_text,
			       Label::BackButton(), Label::FinishButton());

//    UI::ChangeWidget(`id(`edit_button), `Enabled, false);
    any ret = nil;
    while ( true )
    {
        if ((string)UI::QueryWidget(`id(`table), `CurrentItem)==nil){
	 UI::ChangeWidget(`id(`edit_button), `Enabled, false);
	 UI::ChangeWidget(`id(`wake), `Enabled, false);
	 UI::ChangeWidget(`id(`delete_button), `Enabled, false);
        } else{
	  UI::ChangeWidget(`id(`edit_button), `Enabled, true);
	  UI::ChangeWidget(`id(`wake), `Enabled, true);
	  UI::ChangeWidget(`id(`delete_button), `Enabled, true);
	 }

        ret = UI::UserInput();
        y2debug("ret=%1", ret);

	if (ret == `cancel) break;

        if (ret == `next)
        {
            WOL::Write();
            break;
        }
        else if (ret == `abort || ret == `back)
        {
            if (WOL::modified)
                if (Popup::ReallyAbort(true) )
                    break;
                else
                    continue;
            else
                break;
        }
        else if (ret ==`add_button)
        {
            AddorEdit(nil);
            overview = WOL::Overview();
            UI::ChangeWidget(`id(`table), `Items, overview);
        }
        else if (ret == `delete_button)
        {
	 if (Popup::ContinueCancel(_("Really delete this item?"))){
            string todelete = (string)UI::QueryWidget(`id(`table), `CurrentItem);
            WOL::mac_addresses = filter(map m, WOL::mac_addresses, ``(m["mac"]:""!=todelete));
            overview = WOL::Overview();
            UI::ChangeWidget(`id(`table), `Items, overview);
	 }
        }
        else if (ret == `edit_button)
        {
            string toedit = (string)UI::QueryWidget(`id(`table), `CurrentItem);
	    AddorEdit(toedit);
            overview = WOL::Overview();
            UI::ChangeWidget(`id(`table), `Items, overview);
	}
        else if (ret == `wake)
        {
            string mac = (string)UI::QueryWidget(`id(`table), `CurrentItem);
            if (mac != nil && mac !="")
            {
                string cmd = sformat("/usr/bin/wol %1", mac );
                Popup::ShowFeedback(_("Waking remote host"),  mac );
                SCR::Execute(.target.bash, cmd);
                sleep(2000);
                Popup::ClearFeedback();
            }
        }
    }

    Wizard::CloseDialog();
    return (symbol)ret;
}
