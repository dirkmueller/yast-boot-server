{

    textdomain "wol";
    import "Wizard";
    import "Wizard_hw";
    import "Label";
    import "WOL";
    import "Popup";
    import "Require";


    symbol Add () {
        UI::OpenDialog( `opt(`decorated),
                `HBox(
                    `HSpacing(1),
                    `HCenter (
                        `HSquash(
                            `VBox (
                                `HCenter (
                                    `HSquash(
                                        `VBox(
                                            `Left(`VSpacing(0.2)),
                                            `VSpacing(0.2),
                                            `Left(`TextEntry(`id(`host),(_("Enter Hostname:")))),
                                            `Left(`TextEntry(`id(`mac),(_("Enter the MAC Address of
the client:"))))
                                            )
                                        )
                                    ),
                                `HSquash(
                                    `HBox(
                                        `PushButton(`id(`save), _("Save")),
                                        `PushButton(`id(`cancel), _("Cancel"))
                                        )
                                    ),
                                `VSpacing(0.2)
                                )
                            )
                        ),
                    `HSpacing(1)
                        )
                        );

        any ret = nil;
        while (true)
        {
            ret = Wizard::UserInput();
            y2debug("ret=%1", ret);
            if (ret == `save)
            {
                string mac = (string)UI::QueryWidget(`id(`mac), `Value);
                string host = (string)UI::QueryWidget(`id(`host), `Value);
                WOL::Add(mac, host);
                break;
            }
            else if (ret == `back)
            {
                break;
            }
        }
        UI::CloseDialog();
        return (symbol)ret;
    }



    Wizard::CreateDialog();
    if (!Require::RequireAndConflict (["wol", "netdiag"], [],
                             // notification 1/2
                             _("<p>To use Wake-On-Lan, <b>%1</b>  must be installed.</p>") +
                             // notification 2/2
                             _("<p>Do you want to install it now?</p>")))
    {
        return `auto;
    }


    WOL::Read();
    list overview = WOL::Overview();

    term below_table = `PushButton(`id(`wake), _("Wake Up"));
    term contents = Wizard_hw::ConfiguredContent(
        /* Table header */
        `header(_("MAC Address"), _("Hostname")),
        overview, nil, below_table,  nil, nil );


    string caption = _("Wake-On-Lan");
    string help_text = _("
<h2>Wake On LAN</h2>
<p>With WOL you can 'wake up' your pc simply by sending a 'magic packet' 
over the network.</p>");

    Wizard::SetContentsButtons(caption, contents, help_text,
            Label::BackButton(), Label::FinishButton());

    UI::ChangeWidget(`id(`edit_button), `Enabled, false);
    any ret = nil;
    while (true)
    {
        ret = UI::UserInput();
        y2debug("ret=%1", ret);

        if (ret == `next)
        {
            WOL::Write();
            break;
        }
        else if (ret == `abort || ret == `back)
        {
            if (WOL::modified)
                if (Popup::ReallyAbort(true) )
                     break;
                else
                    continue;
            else
                break;
        }
        else if (ret ==`add_button)
        {
            Add();
            overview = WOL::Overview();
            UI::ChangeWidget(`id(`table), `Items, overview);
        }
        else if (ret == `delete_button)
        {
            string todelete = (string)UI::QueryWidget(`id(`table), `CurrentItem);
            WOL::mac_addresses = filter(map m, WOL::mac_addresses, ``(m["mac"]:""!=todelete));
            overview = WOL::Overview();
            UI::ChangeWidget(`id(`table), `Items, overview);
        }
        else if (ret == `wake)
        {
            string mac = (string)UI::QueryWidget(`id(`table), `CurrentItem);
            if (mac != nil && mac !="")
            {
                string cmd = sformat("/usr/sbin/ether-wake %1", mac );
                Popup::ShowFeedback(_("Waking up remote host"),  mac );
                SCR::Execute(.target.bash, cmd);
                sleep(2000);
                Popup::ClearFeedback();
            }
        }
    }

    Wizard::CloseDialog();
    return (symbol)ret;
}
